#!/usr/bin/env ruby

require 'xcodeproj'
require 'rubygems'
require 'commander'

# The name of the project to be created or configured
$project_name = File.basename(Dir.getwd)

# TODO: Encapsulate in class (subclass of `Project`)

# =============================================================================
# xcodeproj utilities
# =============================================================================
def project_from_path(path)
    project = Xcodeproj::Project.new(path, true)
    project.initialize_from_file
    return project
end

def target(project, name, platform, isTest)
    test_suffix = isTest ? ' Tests' : ''
    target_name = "#{name} #{platform}#{test_suffix}"
    return project.targets.find { |x| x.name == target_name }
end

# =============================================================================
# update frameworks command
# =============================================================================
def update_frameworks(name)

    path = "#{Dir.pwd}/#{name}.xcodeproj"

    if !Dir.exist?(path) then
        puts "No project!"
        return
    end

    update_carthage()
    project = project_from_path(path)
    create_carthage_script_phase(project, name)
    add_framework_search_paths(project, name)
    project.save
end

def update_carthage
    system('carthage update')
end

def add_framework_search_paths(project, name)

    ['iOS', 'macOS'].each do |platform|
        [true, false].each do |isTest|
            target(project, name, platform, isTest)
                .build_configuration_list.set_setting(
                    'FRAMEWORK_SEARCH_PATHS', 
                    "$(SRCROOT)/Carthage/Build/#{to_carthage_platform(platform)}"
                )
        end
    end
end

def create_carthage_script_phase(project, name)

    frameworks.each do |platform, fs|

        # Only add shell script phase for test targets!
        t = target(project, name, platform, true)

        # Make sure there's only one shell script phase
        if t.shell_script_build_phases.empty? then
            script_phase = t.new_shell_script_build_phase
            script_phase.shell_script = '/usr/local/bin/carthage copy-frameworks'
        end

        # Only deal with the first one (we are hoping that's the only one)
        script_phase = t.shell_script_build_phases.first

        # Add the path to the framework in the Carthage build dir
        script_phase.input_paths.clear
        fs.each do |f|
            unless f == name
            end
            input_path = 
                "$(SRCROOT)/#{carthage_build_path(
                    to_carthage_platform(platform), f)}"
            script_phase.input_paths << input_path
        end
        
    end
end

def carthage_build_path(platform, framework)
    return "Carthage/Build/#{platform}/#{framework}.framework"
end

# Add platforms option
def frameworks()
    
    # Check that there is a `Cartfile` at all
    unless File.exist?('Cartfile')
        return
    end
    
    # Check that there is a `Carthage ` artifacts directory
    unless Dir.exist?('Carthage')
        return
    end

    Dir.chdir('Carthage/Build')
    result = Hash.new
    carthage_platforms.each do |platform|
        Dir.chdir(platform)
        result[from_carthage_platform(platform)] = Dir.entries('.')
            .select { |y| y.end_with?('framework') }
            .map { |y| y.split('.').first }
        Dir.chdir('../')
    end
    Dir.chdir('../../')
    return result
end

def carthage_platforms
    return ['iOS', 'Mac']
end

def to_carthage_platform(platform)
    return platform == 'macOS' ? 'Mac' : 'iOS'
end

def from_carthage_platform(platform)
    return platform == 'Mac' ? 'macOS' : 'iOS'
end

# =============================================================================
# init command
# =============================================================================
def init(name, platforms)

    puts "Initializing for platforms: #{platforms}"

    path = "#{Dir.pwd}/#{name}.xcodeproj"

    unless !Dir.exist?(path) then
        puts "There's already a project here!"
        return
    end

    git_init
    config(name, platforms)
    create_file_structure(name)
    project = new_project(name)
    configure_PBXGroups(project, name)
    add_info_plist_refs(project, name)
    configure_targets(project, name, platforms)
    configure_header(project, name)
    configure_schemes(project, name)
    configure_build_configuration_settings(project, name)
    project.save
end

def git_init
    system('git init')
end

def new_project(name)
    project = Xcodeproj::Project.new("#{name}.xcodeproj")
    return project
end

def create_file_structure(name)
    Dir.mkdir(name)
    Dir.mkdir("#{name}Tests")
    create_info_plists(name)
end

# =============================================================================
# Build Configuration
# TODO: Add platform variables
# =============================================================================
def configure_build_configuration_settings(project, name)
    configure_project_build_configuration_settings(project, name)
    configure_primary_build_configuration_settings(project, name)
    configure_tests_build_configuration_settings(project, name)
end

def configure_project_build_configuration_settings(project, name) 

    settings = {
        'CLANG_WARN_BOOL_CONVERSION' => 'YES',
        'CLANG_WARN_CONSTANT_CONVERSION' => 'YES',
        'CLANG_WARN_DIRECT_OBJC_ISA_USAGE' => 'YES',
        'CLANG_WARN_EMPTY_BODY' => 'YES',
        'CLANG_WARN_ENUM_CONVERSION' => 'YES',
        'CLANG_WARN_INFINITE_RECURSION' => 'YES',
        'CLANG_WARN_INT_CONVERSION' => 'YES',
        'CLANG_WARN_OBJC_ROOT_CLASS' => 'YES',
        'CLANG_WARN_SUSPICIOUS_MOVE' => 'YES',
        'CLANG_WARN_UNREACHABLE_CODE' => 'YES',
        'CLANG_WARN__DUPLICATE_METHOD_MATCH' => 'YES',
        'GCC_WARN_64_TO_32_BIT_CONVERSION' => 'YES',
        'GCC_WARN_ABOUT_RETURN_TYPE' => 'YES',
        'GCC_WARN_UNDECLARED_SELECTOR' => 'YES',
        'GCC_WARN_UNINITIALIZED_AUTOS' => 'YES',
        'GCC_WARN_UNUSED_FUNCTION' => 'YES',
        'GCC_WARN_UNUSED_VARIABLE' => 'YES',
        'GCC_NO_COMMON_BLOCKS' => 'YES',
        'ENABLE_STRICT_OBJC_MSGSEND' => 'YES',
        'SWIFT_OPTIMIZATION_LEVEL' => '-Owholemodule'
    }

    settings.each do |key, val| 
        project.build_configuration_list.set_setting(key, val)
    end
end

# TODO: Add platform variables
def configure_primary_build_configuration_settings(project, name)

    ['iOS', 'macOS'].each do |platform|

        # FIXME: abstract away
        target = project.targets.find { |y| y.name == "#{name} #{platform}" }

        settings = {
            'INFOPLIST_FILE' => "#{name}/Info.plist",
            'ALWAYS_EMBED_SWIFT_STANDARD_LIBRARIES' => 'NO',
            'PRODUCT_NAME' => "#{name}",
            'CODE_SIGN_IDENTITY[sdk=iphoneos*]' => "-",
            'PRODUCT_BUNDLE_IDENTIFIER' => "com.dn-m.#{name}"
        }

        settings.each do |key, val|
            target.build_configuration_list.set_setting(key, val)
        end
    end
end

# TODO: Add platform variables
def configure_tests_build_configuration_settings(project, name)

    ['iOS', 'macOS'].each do |platform|

        target = project.targets.find { |y| y.name == "#{name} #{platform} Tests" }

        settings = { 
            'INFOPLIST_FILE' => "#{name}Tests/Info.plist",
            'COMBINE_HIDPI_IMAGES' => 'YES'
        }

        settings.each do |key, val|
            target.build_configuration_list.set_setting(key, val)
        end
    end
end

# =============================================================================
# Schemes
# =============================================================================
# TODO: Add platform variables
def configure_schemes(project, name, platforms=['iOS', 'macOS'])
    share_schemes(project, name, platforms)
    add_testable_entries(project, name, platforms)
end

# TODO: Add platform variables
def add_testable_entries(project, name, platforms=['iOS','macOS'])

    platforms.each do |platform|
        
        # FIXME: abstract away
        target = project.targets.find { |y| y.name == "#{name} #{platform} Tests" }

        # Scheme
        scheme_name = "#{name} #{platform}.xcscheme"
        scheme_path = "#{Dir.pwd}/#{name}.xcodeproj/xcshareddata/xcschemes/#{scheme_name}"
        scheme = Xcodeproj::XCScheme.new(scheme_path)

        testable_entry = Xcodeproj::XCScheme::BuildAction::Entry.new(target)
        testable_entry.build_for_analyzing = false
        scheme.build_action.add_entry(testable_entry)
        scheme.test_action.add_testable(testable_ref(target))
        scheme.test_action.code_coverage_enabled = true
        scheme.save!
    end
end

def testable_ref(test_target)
    return Xcodeproj::XCScheme::TestAction::TestableReference.new(test_target)
end

# TODO: Add platform variables
def share_schemes(project, name, platforms=['iOS','macOS'])
    project.recreate_user_schemes(true)
    
    platforms.each do |platform|
        Xcodeproj::XCScheme.share_scheme(
            "#{Dir.pwd}/#{name}.xcodeproj", "#{name} #{platform}"
        )
    end
end

# =============================================================================
# Header
# TODO: iOS macOS / framework / app options
# =============================================================================
def configure_header(project, name)
    header_path = "#{name}/#{name}.h"
    create_empty_header(header_path)
    add_header_build_files(project, name, header_path)
end

def create_empty_header(path)
    FileUtils.touch(path)
end

def add_header_build_files(
    project, name, header_path, platforms=['iOS','macOS']
)
    
    header_ref = project.main_group.new_file(header_path)

    platforms.each do |platform|
        build_file = project.targets
            .find { |y| y.name == "#{name} #{platform}" }
            .add_file_references([header_ref], 'header_build_file')
        build_file.first.settings = { 'ATTRIBUTES' => ['Public'] }
    end
end

# =============================================================================
# Targets
# =============================================================================
def configure_targets(project, name, platforms=['iOS', 'macOS'])

    platforms.each do |platform|

        target_name = "#{name} #{platform}"

        # TODO: Store versions in Hash somewhere
        version = platform == 'iOS' ? '8.4' : '10.9'
        platform_symbol = platform == 'iOS' ? :ios : :osx

        primary_target = project.new_target(
            :framework, 
            target_name, 
            platform_symbol, 
            version
        )

        tests_target = project.new_target(
            :unit_test_bundle, 
            "#{target_name} Tests", 
            platform_symbol, 
            version
        )
    
        tests_target.add_dependency(primary_target)
    end
end

# =============================================================================
# Supporting Files
# =============================================================================
def add_info_plist_refs(project, name)
    [name, "#{name}Tests"].each do |x|
        project[x]["Supporting Files"].new_file("#{x}/Info.plist")
    end
end

def create_info_plists(name)
    create_tests_info_plist(name)
    create_primary_framework_info_plist(name)
end

# TODO: App Info.plist
def create_primary_framework_info_plist(name)
    File.open("#{name}/Info.plist", 'w') { |file| 
        file.puts("<?xml version=\"1.0\" encoding=\"UTF-8\"?>")
        file.puts("<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">")
        file.puts("<plist version=\"1.0\">")
        file.puts("<dict>")
        file.puts("    <key>CFBundleDevelopmentRegion</key>")
        file.puts("    <string>en</string>")
        file.puts("    <key>CFBundleExecutable</key>")
        file.puts("    <string>$(EXECUTABLE_NAME)</string>")
        file.puts("    <key>CFBundleIdentifier</key>")
        file.puts("    <string>$(PRODUCT_BUNDLE_IDENTIFIER)</string>")
        file.puts("    <key>CFBundleInfoDictionaryVersion</key>")
        file.puts("    <string>6.0</string>")
        file.puts("    <key>CFBundleName</key>")
        file.puts("    <string>$(PRODUCT_NAME)</string>")
        file.puts("    <key>CFBundlePackageType</key>")
        file.puts("    <string>FMWK</string>")
        file.puts("    <key>CFBundleShortVersionString</key>")
        file.puts("    <string>1.0</string>")
        file.puts("    <key>CFBundleSignature</key>")
        file.puts("    <string>????</string>")
        file.puts("    <key>CFBundleVersion</key>")
        file.puts("    <string>$(CURRENT_PROJECT_VERSION)</string>")
        file.puts("    <key>NSPrincipalClass</key>")
        file.puts("    <string></string>")
        file.puts("</dict>")
        file.puts("</plist>")
    }
end

def create_tests_info_plist(name)
    File.open("#{name}Tests/Info.plist", 'w') { |file| 
        file.puts("<?xml version=\"1.0\" encoding=\"UTF-8\"?>")
        file.puts("<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">")
        file.puts("<plist version=\"1.0\">")
        file.puts("<dict>")
        file.puts("    <key>CFBundleDevelopmentRegion</key>")
        file.puts("    <string>en</string>")
        file.puts("    <key>CFBundleExecutable</key>")
        file.puts("    <string>$(EXECUTABLE_NAME)</string>")
        file.puts("    <key>CFBundleIdentifier</key>")
        file.puts("    <string>$(PRODUCT_BUNDLE_IDENTIFIER)</string>")
        file.puts("    <key>CFBundleInfoDictionaryVersion</key>")
        file.puts("    <string>6.0</string>")
        file.puts("    <key>CFBundleName</key>")
        file.puts("    <string>$(PRODUCT_NAME)</string>")
        file.puts("    <key>CFBundlePackageType</key>")
        file.puts("    <string>BNDL</string>")
        file.puts("    <key>CFBundleShortVersionString</key>")
        file.puts("    <string>1.0</string>")
        file.puts("    <key>CFBundleSignature</key>")
        file.puts("    <string>????</string>")
        file.puts("    <key>CFBundleVersion</key>")
        file.puts("    <string>1</string>")
        file.puts("</dict>")
        file.puts("</plist>")
    }
end

# =============================================================================
# PBXGroups
# =============================================================================
def configure_PBXGroups(project, name)
    [name, "#{name}Tests"].each do |x|
        project
            .new_group(x)
            .new_group("Supporting Files")
    end
    return project
end

# =============================================================================
# config command
# =============================================================================
def config(name, platforms=['iOS', 'macOS'])

    puts "Configuring for platforms: #{platforms}"

    create_gitignore
    create_travis(name, platforms) # find platforms
    create_swift_lint
    create_hound
    create_cartfile
    create_readme(name, platforms)
end

def create_gitignore
    File.open('.gitignore', 'w') { |file| 
        file.puts("## Build generated")
        file.puts("build/")
        file.puts("DerivedData/")
        file.puts()
        file.puts("## Various settings")
        file.puts("*.pbxuser")
        file.puts("!default.pbxuser")
        file.puts("*.mode1v3")
        file.puts("!default.mode1v3")
        file.puts("*.mode2v3")
        file.puts("!default.mode2v3")
        file.puts("*.perspectivev3")
        file.puts("!default.perspectivev3")
        file.puts("xcuserdata/")
        file.puts()
        file.puts("## Other")
        file.puts("*.moved-aside")
        file.puts("*.xcuserstate")
        file.puts()
        file.puts("## Obj-C/Swift specific")
        file.puts("*.hmap")
        file.puts("*.ipa")
        file.puts("*.dSYM.zip")
        file.puts("*.dSYM")
        file.puts()
        file.puts("# Carthage")
        file.puts("Carthage/Checkouts")
        file.puts("Carthage/Build")
    }
end

# TODO: Store build hardware, OS versions, etc. in Hash somewhere
def create_travis(name, platforms)

    File.open('.travis.yml', 'w') { |file| 
        file.puts("language: objective-c")
        file.puts("osx_image: xcode8")
        file.puts("env:")
        file.puts("  matrix:")

        platforms.each do |platform|

            scheme = "#{name} #{platform}"

            case platform
            when 'iOS'
                
                file.puts(
                    "    - DESTINATION=\"platform=iOS Simulator,OS=9.3,name=iPad 2\""
                )
                
                file.puts("      SCHEME=\"#{scheme}\"")
                
                file.puts(
                    "    - DESTINATION=\"platform=iOS Simulator,OS=10.0,name=iPad Pro (12.9 inch)\""
                )

                file.puts("      SCHEME=\"#{name}\"")

            when 'macOS'
                file.puts("    - DESTINATION=\"platform=OS X\"")
                file.puts("      SCHEME=\"#{scheme}\"")            
            end
        end

        file.puts()
        file.puts("before_script: if [ -f ./Cartfile ]; then carthage update; fi;")
        file.puts()
        file.puts("script: travis_retry xcodebuild test")
        file.puts("  -project #{name}.xcodeproj")
        file.puts("  -scheme \"${SCHEME}\"")
        file.puts("  -destination \"${DESTINATION}\"")
        file.puts("  TOOLCHAINS=swift")
        file.puts()
        file.puts("after_success:")
        file.puts("  - bash <(curl -s https://codecov.io/bash)")
    }   
end

def create_swift_lint
    File.open('.swiftlint.yml', 'w') { |file| 
        file.puts("disabled_rules:")
        file.puts("  - comma")
        file.puts("  - variable_name")
        file.puts()
        file.puts("excluded:")
        file.puts("  - Carthage")
        file.puts()
        file.puts("trailing_whitespace:")
        file.puts("  ignores_empty_lines: true")
    }
end

def create_hound 
    File.open('.hound.yml', 'w') { |file| 
        file.puts("swift:")
        file.puts("  config_file: .swiftlint.yml")
    }
end

def create_cartfile
    FileUtils.touch('Cartfile')
end

def create_readme(name, platforms)

    puts "Readme for platforms: #{platforms}"

    platform_phrase = platforms.join(' or ')

    puts "Platform phrase: #{platform_phrase}"

    File.open('README.md', 'w') { |file| 
        file.puts("# #{name}")
        file.puts()
        file.puts("![Swift](https://img.shields.io/badge/%20in-swift%203.0-orange.svg)")
        file.puts("[![Build Status](https://travis-ci.org/dn-m/#{name}.svg?branch=master)](https://travis-ci.org/dn-m/#{name}) ")
        file.puts("[![codecov](https://codecov.io/gh/dn-m/#{name}/branch/master/graph/badge.svg)](https://codecov.io/gh/dn-m/#{name}) ")
        file.puts("[![Carthage compatible](https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat)](https://github.com/Carthage/Carthage) ")
        file.puts("[![GitHub version](https://badge.fury.io/gh/dn-m%2F#{name}.svg)](https://badge.fury.io/gh/dn-m%2F#{name}) ")
        file.puts()
        file.puts("## Integration")
        file.puts()
        file.puts("### Carthage")
        file.puts("Integrate **#{name}** into your #{platform_phrase} project with [Carthage](https://github.com/Carthage/Carthage).")
        file.puts()
        file.puts("1. Follow [these instructions](https://github.com/Carthage/Carthage#installing-carthage) to install Carthage, if necessary.")
        file.puts("2. Add `github \"dn-m/#{name}\"` to your [Cartfile](https://github.com/Carthage/Carthage/blob/master/Documentation/Artifacts.md#cartfile).")
        file.puts("3. Follow [these instructions](https://github.com/Carthage/Carthage#adding-frameworks-to-an-application) to integrate **#{name}** into your #{platform_phrase} project.")
        file.puts()
        file.puts("---")
        file.puts()
        file.puts("### Documentation")
        file.puts("See the [documentation](http://dn-m.github.io/#{name}/).")
    }
end

class Helper
  include Commander::Methods

    def run
        program :name, 'dn-m'
        program :version, '0.1'
        program :description, 'Creates and maintains dn-m projects.'

        command :config do |c|
            c.syntax = 'config'
            c.description = 'Creates configuration files for testing.'
            c.action do |args, options|
                config($project_name)
            end
        end

        command :init do |c|
            c.syntax = 'init [-a | -f]'
            c.description = 'Create a new project'
            c.option '--platforms', String, 'iOS or macOS'
            c.action do |args, options|

                platforms = args.empty? ? ['iOS', 'macOS'] : args

                puts "args: #{args}"
                puts "options: #{options}"

                puts "Platforms to build: #{platforms}"

                init($project_name, platforms)
            end
        end

        command :update do |c|
            c.syntax = 'update'
            c.description = 'Update the frameworks for the current project'
            c.action do |args, options|
                update_frameworks($project_name)
            end
        end

        run!
    end
end

Helper.new.run if $0 == __FILE__