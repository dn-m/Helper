#!/usr/bin/env ruby

# Move this do xcodeproj specific scripts
require 'xcodeproj'
require 'rubygems'
require 'commander'

puts "Generating directory structure"
puts "Generating environment artifacts"
puts "Generating xcodeproj"
puts "Configuring xcodeproj"

# The name of the project to be created or configured
$project_name = File.basename(Dir.getwd)


def config(project_name)
    puts "Configuring artifacts for #{project_name}"
    create_gitignore
    create_travis
    create_swift_lint
end

def create_gitignore
    File.open('.gitignore', 'w') { |file| 
        file.puts("## Build generated")
        file.puts("build/")
        file.puts("DerivedData/")
        file.puts()
        file.puts("## Various settings")
        file.puts("*.pbxuser")
        file.puts("!default.pbxuser")
        file.puts("*.mode1v3")
        file.puts("!default.mode1v3")
        file.puts("*.mode2v3")
        file.puts("!default.mode2v3")
        file.puts("*.perspectivev3")
        file.puts("!default.perspectivev3")
        file.puts("xcuserdata/")
        file.puts()
        file.puts("## Other")
        file.puts("*.moved-aside")
        file.puts("*.xcuserstate")
        file.puts()
        file.puts("## Obj-C/Swift specific")
        file.puts("*.hmap")
        file.puts("*.ipa")
        file.puts("*.dSYM.zip")
        file.puts("*.dSYM")
        file.puts()
        file.puts("# Carthage")
        file.puts("Carthage/Checkouts")
        file.puts("Carthage/Build")
    }
end

def create_travis
    File.open('.travis.yml', 'w') { |file| 
        file.puts("language: objective-c")
        file.puts("osx_image: xcode8")
        file.puts("env:")
        file.puts("  matrix:")
        file.puts("    - DESTINATION=\"platform=iOS Simulator,OS=9.3,name=iPad 2\"")
        file.puts("      SCHEME=\"\(projectName)\"")
        file.puts("    - DESTINATION=\"platform=iOS Simulator,OS=10.0,name=iPad Pro (12.9 inch)\"")
        file.puts("      SCHEME=\"\(projectName)\"")
        file.puts("    - DESTINATION=\"platform=OS X\"")
        file.puts("      SCHEME=\"\(projectName)Mac\"")
        file.puts()
        file.puts("before_script: if [ -f ./Cartfile ]; then carthage update; fi;")
        file.puts()
        file.puts("script: travis_retry xcodebuild test")
        file.puts("  -project \(projectName).xcodeproj")
        file.puts("  -scheme \"${SCHEME}\"")
        file.puts("  -destination \"${DESTINATION}\"")
        file.puts("  TOOLCHAINS=swift")
        file.puts()
        file.puts("after_success:")
        file.puts("  - bash <(curl -s https://codecov.io/bash)")
    }   
end

def create_swift_lint
    File.open('.swiftlint.yml', 'w') { |file| 
        file.puts("disabled_rules:")
        file.puts("  - comma")
        file.puts("  - variable_name")
        file.puts()
        file.puts("excluded:")
        file.puts("  - Carthage")
        file.puts()
        file.puts("trailing_whitespace:")
        file.puts("  ignores_empty_lines: true")
    }
end

# README
# travis
# hound
# swiftlint
# Cartfile if it doesnt exist
# .gitignore

def init(project_name)
    puts "Initializing repository for #{project_name}"
end

class MyApplication
  include Commander::Methods

    

    def run
        program :name, 'Foo Bar'
        program :version, '1.0.0'
        program :description, 'Stupid command that prints foo or bar.'

        command :config do |c|
            c.syntax = 'config'
            c.description = 'Configures test environment'
            c.action do |args, options|
                config($project_name)
            end
        end

        command :init do |c|
            c.syntax = 'init'
            c.description = 'Create new repository from scratch'
            c.action do |args, options|
                init($project_name)
            end
        end

        run!
    end
end

MyApplication.new.run if $0 == __FILE__


