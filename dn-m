#!/usr/bin/env ruby

require 'xcodeproj'
require 'rubygems'
require 'commander'

# The name of the project to be created or configured
$project_name = File.basename(Dir.getwd)

# =============================================================================
# init
# =============================================================================
def init(project_name)
    puts "Generating project: #{project_name}"
    create_file_structure(project_name)
    project = new_project(project_name)
    configure_PBXGroups(project, project_name)
    add_info_plist_refs(project, project_name)
    project.save
end

def new_project(project_name)
    project = Xcodeproj::Project.new("#{project_name}.xcodeproj")
    return project
end

def create_file_structure(project_name)
    puts "Generating directory structure"
    Dir.mkdir(project_name)
    Dir.mkdir("#{project_name}Tests")
    create_info_plists(project_name)
end

def create_project(project_name)
    project = Xcodeproj::Project.new("#{project_name}.xcodeproj")
    project.save
end

# =============================================================================
# Targets
# TODO: iOS macOS / framework / test
# =============================================================================
def configure_ios_targets(project, name)
    
    # Options

    ios_framework_target = project.new_target(
        :framework, 
        name, 
        :ios, 
        '8.4'
    )

    ios_tests_target = project.new_target(
        :unit_test_bundle, 
        "#{name}Tests", 
        :ios, 
        '8.4'
    )
    
    ios_tests_target.add_dependency(ios_framework_target)
end

# =============================================================================
# Supporting Files
# TODO: Add empty headers
# =============================================================================

def add_info_plist_refs(project, name)
    [name, "#{name}Tests"].each do |x|
        project[x]["Supporting Files"].new_file("#{x}/Info.plist")
    end
end

def create_info_plists(name)
    create_tests_info_plist(name)
    create_primary_framework_info_plist(name)
end

# TODO: App Info.plist
def create_primary_framework_info_plist(name)
    File.open("#{name}/Info.plist", 'w') { |file| 
        file.puts("<?xml version=\"1.0\" encoding=\"UTF-8\"?>")
        file.puts("<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">")
        file.puts("<plist version=\"1.0\">")
        file.puts("<dict>")
        file.puts("    <key>CFBundleDevelopmentRegion</key>")
        file.puts("    <string>en</string>")
        file.puts("    <key>CFBundleExecutable</key>")
        file.puts("    <string>$(EXECUTABLE_NAME)</string>")
        file.puts("    <key>CFBundleIdentifier</key>")
        file.puts("    <string>$(PRODUCT_BUNDLE_IDENTIFIER)</string>")
        file.puts("    <key>CFBundleInfoDictionaryVersion</key>")
        file.puts("    <string>6.0</string>")
        file.puts("    <key>CFBundleName</key>")
        file.puts("    <string>$(PRODUCT_NAME)</string>")
        file.puts("    <key>CFBundlePackageType</key>")
        file.puts("    <string>FMWK</string>")
        file.puts("    <key>CFBundleShortVersionString</key>")
        file.puts("    <string>1.0</string>")
        file.puts("    <key>CFBundleSignature</key>")
        file.puts("    <string>????</string>")
        file.puts("    <key>CFBundleVersion</key>")
        file.puts("    <string>$(CURRENT_PROJECT_VERSION)</string>")
        file.puts("    <key>NSPrincipalClass</key>")
        file.puts("    <string></string>")
        file.puts("</dict>")
        file.puts("</plist>")
    }
end

def create_tests_info_plist(name)
    File.open("#{name}Tests/Info.plist", 'w') { |file| 
        file.puts("<?xml version=\"1.0\" encoding=\"UTF-8\"?>")
        file.puts("<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">")
        file.puts("<plist version=\"1.0\">")
        file.puts("<dict>")
        file.puts("    <key>CFBundleDevelopmentRegion</key>")
        file.puts("    <string>en</string>")
        file.puts("    <key>CFBundleExecutable</key>")
        file.puts("    <string>$(EXECUTABLE_NAME)</string>")
        file.puts("    <key>CFBundleIdentifier</key>")
        file.puts("    <string>$(PRODUCT_BUNDLE_IDENTIFIER)</string>")
        file.puts("    <key>CFBundleInfoDictionaryVersion</key>")
        file.puts("    <string>6.0</string>")
        file.puts("    <key>CFBundleName</key>")
        file.puts("    <string>$(PRODUCT_NAME)</string>")
        file.puts("    <key>CFBundlePackageType</key>")
        file.puts("    <string>BNDL</string>")
        file.puts("    <key>CFBundleShortVersionString</key>")
        file.puts("    <string>1.0</string>")
        file.puts("    <key>CFBundleSignature</key>")
        file.puts("    <string>????</string>")
        file.puts("    <key>CFBundleVersion</key>")
        file.puts("    <string>1</string>")
        file.puts("</dict>")
        file.puts("</plist>")
    }
end

# =============================================================================
# PBXGroups
# =============================================================================
def configure_PBXGroups(project, name)
    puts "Configure PBXGroups: project: #{name}"
    [name, "#{name}Tests"].each do |x|
        project
            .new_group(x)
            .new_group("Supporting Files")
    end
    return project
end

# =============================================================================
# config 
# =============================================================================
def config(name)
    puts "Configuring artifacts for #{name}"
    create_gitignore
    create_travis(name)
    create_swift_lint
    create_hound
    create_cartfile
    create_readme(name)
end

def create_gitignore
    File.open('.gitignore', 'w') { |file| 
        file.puts("## Build generated")
        file.puts("build/")
        file.puts("DerivedData/")
        file.puts()
        file.puts("## Various settings")
        file.puts("*.pbxuser")
        file.puts("!default.pbxuser")
        file.puts("*.mode1v3")
        file.puts("!default.mode1v3")
        file.puts("*.mode2v3")
        file.puts("!default.mode2v3")
        file.puts("*.perspectivev3")
        file.puts("!default.perspectivev3")
        file.puts("xcuserdata/")
        file.puts()
        file.puts("## Other")
        file.puts("*.moved-aside")
        file.puts("*.xcuserstate")
        file.puts()
        file.puts("## Obj-C/Swift specific")
        file.puts("*.hmap")
        file.puts("*.ipa")
        file.puts("*.dSYM.zip")
        file.puts("*.dSYM")
        file.puts()
        file.puts("# Carthage")
        file.puts("Carthage/Checkouts")
        file.puts("Carthage/Build")
    }
end

def create_travis(name)
    File.open('.travis.yml', 'w') { |file| 
        file.puts("language: objective-c")
        file.puts("osx_image: xcode8")
        file.puts("env:")
        file.puts("  matrix:")
        file.puts("    - DESTINATION=\"platform=iOS Simulator,OS=9.3,name=iPad 2\"")
        file.puts("      SCHEME=\"#{name}\"")
        file.puts("    - DESTINATION=\"platform=iOS Simulator,OS=10.0,name=iPad Pro (12.9 inch)\"")
        file.puts("      SCHEME=\"#{name}\"")
        file.puts("    - DESTINATION=\"platform=OS X\"")
        file.puts("      SCHEME=\"#{name}Mac\"")
        file.puts()
        file.puts("before_script: if [ -f ./Cartfile ]; then carthage update; fi;")
        file.puts()
        file.puts("script: travis_retry xcodebuild test")
        file.puts("  -project #{name}.xcodeproj")
        file.puts("  -scheme \"${SCHEME}\"")
        file.puts("  -destination \"${DESTINATION}\"")
        file.puts("  TOOLCHAINS=swift")
        file.puts()
        file.puts("after_success:")
        file.puts("  - bash <(curl -s https://codecov.io/bash)")
    }   
end

def create_swift_lint
    File.open('.swiftlint.yml', 'w') { |file| 
        file.puts("disabled_rules:")
        file.puts("  - comma")
        file.puts("  - variable_name")
        file.puts()
        file.puts("excluded:")
        file.puts("  - Carthage")
        file.puts()
        file.puts("trailing_whitespace:")
        file.puts("  ignores_empty_lines: true")
    }
end

def create_hound 
    File.open('.hound.yml', 'w') { |file| 
        file.puts("swift:")
        file.puts("  config_file: .swiftlint.yml")
    }
end

def create_cartfile
    unless File.file?('Cartfile') then
        FileUtils.touch('Cartfile')
    end
end

def create_readme(name)

    File.open('README.md', 'w') { |file| 
        file.puts("# #{name}")
        file.puts()
        file.puts("![Swift](https://img.shields.io/badge/%20in-swift%203.0-orange.svg)")
        file.puts("[![Build Status](https://travis-ci.org/dn-m/#{name}.svg?branch=master)](https://travis-ci.org/dn-m/#{name}) ")
        file.puts("[![codecov](https://codecov.io/gh/dn-m/#{name}/branch/master/graph/badge.svg)](https://codecov.io/gh/dn-m/#{name}) ")
        file.puts("[![Carthage compatible](https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat)](https://github.com/Carthage/Carthage) ")
        file.puts("[![GitHub version](https://badge.fury.io/gh/dn-m%2F#{name}.svg)](https://badge.fury.io/gh/dn-m%2F#{name}) ")
        file.puts()
        file.puts("## Integration")
        file.puts()
        file.puts("### Carthage")
        file.puts("Integrate **#{name}** into your macOS or iOS project with [Carthage](https://github.com/Carthage/Carthage).")
        file.puts()
        file.puts("1. Follow [these instructions](https://github.com/Carthage/Carthage#installing-carthage) to install Carthage, if necessary.")
        file.puts("2. Add `github \"dn-m/#{name}\"` to your [Cartfile](https://github.com/Carthage/Carthage/blob/master/Documentation/Artifacts.md#cartfile).")
        file.puts("3. Follow [these instructions](https://github.com/Carthage/Carthage#adding-frameworks-to-an-application) to integrate **#{name}** into your macOS or iOS project.")
        file.puts()
        file.puts("---")
        file.puts()
        file.puts("### Documentation")
        file.puts("See the [documentation](http://dn-m.github.io/#{name}/).")
    }
end

class MyApplication
  include Commander::Methods

    def run
        program :name, 'Foo Bar'
        program :version, '1.0.0'
        program :description, 'Stupid command that prints foo or bar.'

        command :config do |c|
            c.syntax = 'config'
            c.description = 'Configures test environment'
            c.action do |args, options|
                config($project_name)
            end
        end

        command :init do |c|
            c.syntax = 'init'
            c.description = 'Create new repository from scratch'
            c.action do |args, options|
                init($project_name)
            end
        end

        run!
    end
end

MyApplication.new.run if $0 == __FILE__


