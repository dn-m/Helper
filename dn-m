#!/usr/bin/env ruby

require 'xcodeproj'
require 'rubygems'
require 'commander'

# The name of the project to be created or configured
$project_name = File.basename(Dir.getwd)

# TODO: Encapsulate in class (subclass of `Project`)

# =============================================================================
# xcodeproj utilities
# =============================================================================
def target(project, name, platform, isTest)
    test_suffix = isTest ? ' Tests' : ''
    target_name = "#{name} #{platform}#{test_suffix}"
    return project.targets.find { |x| x.name == target_name }
end

# =============================================================================
# update frameworks command
# =============================================================================
def update_frameworks(name)

    path = "#{Dir.pwd}/#{name}.xcodeproj"

    if !Dir.exist?(path) then
        puts "No project!"
        return
    end

    update_carthage()
    inject_frameworks(name)
end

def inject_frameworks(name)
    
    path = "#{Dir.pwd}/#{name}.xcodeproj"

    if !Dir.exist?(path) then
        puts "No project!"
        return
    end

    project = project_from_path(path)
    create_carthage_script_phase_for_test_targets(project, name)
    add_framework_search_paths(project, name)
    inject_frameworks_into_application_targets(project)
    project.save
end

def inject_frameworks_into_application_targets(project)

    project
        .targets
        .select { |t| t.product_type == "com.apple.product-type.application" }
        .each { |t| inject_frameworks_into_application_target(t, project) }
end

def inject_frameworks_into_application_target(t, project)

    unless t.product_type == "com.apple.product-type.application"
    	puts "Not application target!"
        return
    end

    # Retrieve proper platform name
    platform = t.platform_name == :ios ? 'iOS' : 'macOS'

    # Ensure that group exists for frameworks of given platform
    if project.frameworks_group[platform].nil?
        project.frameworks_group.new_group(platform)
    end

    add_carthage_script(t, platform, frameworks[platform])
    prepare_link_binaries_phase_for_target(t)
    embed_frameworks_build_phase = create_embed_frameworks_phase(
        project, t
    )

    # Clear framework file references from each Frameworks subgroup
    project.frameworks_group[platform].clear

    # For each framework, 
    frameworks[platform].each do |f|
        add_embed_frameworks_refs_to_phase(
            embed_frameworks_build_phase, project, platform, t, f
        )
    end
end

def add_embed_frameworks_refs_to_phase(phase, project, platform, t, f)
    path = "#{carthage_build_path(platform, f)}.framework"
    ref = project.frameworks_group[platform].new_reference(path)
    build_file = phase.add_file_reference(ref)
    
    build_file.settings = { 
        'ATTRIBUTES' => ['CodeSignOnCopy', 'RemoveHeadersOnCopy'] 
    }

    t.frameworks_build_phase.add_file_reference(ref)
end

# Create and return embed frameworks phase for a given target
def create_embed_frameworks_phase(project, t)
    
    t.build_phases.delete_if { |phase| 
        phase.to_s == 'Embed Frameworks'
    }

    embed_frameworks_build_phase = project.new(
        Xcodeproj::Project::Object::PBXCopyFilesBuildPhase
    )

    embed_frameworks_build_phase.name = 'Embed Frameworks'
    embed_frameworks_build_phase.symbol_dst_subfolder_spec = :frameworks
    t.build_phases << embed_frameworks_build_phase
    return embed_frameworks_build_phase
end

def prepare_link_binaries_phase_for_target(t)
    link_binaries_phase = t.build_phases.find { |phase| 
        phase.to_s == 'FrameworksBuildPhase'
    }
    link_binaries_phase.clear
end

def project_from_path(path)
    project = Xcodeproj::Project.new(path, true)
    project.initialize_from_file
    return project
end

def update_carthage
    system('carthage update')
end

# TODO: Add knowledge of frameworks!
def add_framework_search_paths(project, name)

    ['iOS', 'macOS'].each do |platform|
        [true, false].each do |isTest|
        	t = target(project, name, platform, isTest)

        	# Add carthage build dir to framework search paths
            t.build_configuration_list.set_setting(
                'FRAMEWORK_SEARCH_PATHS', 
                "$(SRCROOT)/#{carthage_build_dir_for_platform(platform)}"
            )

            if isTest
                # Add carthage build dir to runpath search paths
                case platform
                when 'iOS'
                    t.build_configuration_list.set_setting(
                        'LD_RUNPATH_SEARCH_PATHS',
                        "$(inherited) @executable_path/Frameworks @loader_path/Frameworks $(SRCROOT)/Carthage/Build/iOS"
                    )
                when 'macOS'
                    t.build_configuration_list.set_setting(
                        'LD_RUNPATH_SEARCH_PATHS',
                        "$(inherited) @executable_path/../Frameworks @loader_path/../Frameworks $(SRCROOT)/Carthage/Build/Mac"
                    )
                end
            end
        end
    end
end

# Takes in target
def add_carthage_script(t, platform, fs)
    if t.shell_script_build_phases.empty? then
        script_phase = t.new_shell_script_build_phase
        script_phase.shell_script = 
            '/usr/local/bin/carthage copy-frameworks'
    end

    # Only deal with the first one (we are hoping that's the only one)
    script_phase = t.shell_script_build_phases.first

    # Add the path to the framework in the Carthage build dir
    script_phase.input_paths.clear
    fs.each do |f|
        input_path = 
            "$(SRCROOT)/#{carthage_build_path(platform, f)}.framework"
        script_phase.input_paths << input_path
    end
end

# Add carthage run script for test targets
def create_carthage_script_phase_for_test_targets(project, name)
    frameworks.each do |platform, fs|
        t = target(project, name, platform, true)
        add_carthage_script(t, platform, fs)
    end
end

# Take ['iOS', 'macOS'] platform
def carthage_build_path(platform, framework)
    return "#{carthage_build_dir_for_platform(platform)}/#{framework}"
end

def carthage_build_dir_for_platform(platform)
    return "#{carthage_build_dir}/#{to_carthage_platform(platform)}"
end

def carthage_build_dir
    return "Carthage/Build"
end

# Returns [platform: [framework_names]]
def frameworks
    
    # Check that there is a `Cartfile` at all
    unless File.exist?('Cartfile')
        return
    end
    
    # Check that there is a `Carthage ` artifacts directory
    unless Dir.exist?('Carthage')
        return
    end

    Dir.chdir('Carthage/Build')
    result = Hash.new

    # Carthage may not be built yet
    carthage_platforms.each do |platform|
        Dir.chdir(platform)
        result[from_carthage_platform(platform)] = Dir.entries('.')
            .select { |y| y.end_with?('framework') }
            .map { |y| y.split('.').first }
        Dir.chdir('../')
    end
    Dir.chdir('../../')
    return result
end

def carthage_platforms
    return ['iOS', 'Mac']
end

def to_carthage_platform(platform)
    return platform == 'macOS' ? 'Mac' : 'iOS'
end

def from_carthage_platform(platform)
    return platform == 'Mac' ? 'macOS' : 'iOS'
end

# =============================================================================
# init command
# =============================================================================
def init(name, platforms, type)

    # Create environment
    git_init(name)
    config(name, platforms)
    create_file_structure(name)

    # Create xcodeproj
    project = new_project(name)
    configure_PBXGroups(project, name)

    create_info_plists(name, type, platforms)
    add_info_plist_refs(project, name)
    configure_targets(project, name, type, platforms)
    configure_header(project, name, platforms)
    configure_schemes(project, name, platforms)
    configure_build_configuration_settings(project, name, platforms)

    # Save xcodeproj
    project.save
end

def git_init(name)
    system('git init')
    system("git remote add origin https://github.com/dn-m/#{name}")
end

def new_project(name)
    project = Xcodeproj::Project.new("#{name}.xcodeproj")
    return project
end

def create_file_structure(name)
    Dir.mkdir(name)
    Dir.mkdir("#{name}Tests")
end

# =============================================================================
# Build Configuration
# TODO: Add platform variables
# =============================================================================
def configure_build_configuration_settings(project, name, platforms)
    configure_project_build_configuration_settings(project, name)
    configure_primary_build_configuration_settings(project, name, platforms)
    configure_tests_build_configuration_settings(project, name, platforms)
end

def configure_project_build_configuration_settings(project, name) 

    settings = {
        'CLANG_WARN_BOOL_CONVERSION' => 'YES',
        'CLANG_WARN_CONSTANT_CONVERSION' => 'YES',
        'CLANG_WARN_DIRECT_OBJC_ISA_USAGE' => 'YES',
        'CLANG_WARN_EMPTY_BODY' => 'YES',
        'CLANG_WARN_ENUM_CONVERSION' => 'YES',
        'CLANG_WARN_INFINITE_RECURSION' => 'YES',
        'CLANG_WARN_INT_CONVERSION' => 'YES',
        'CLANG_WARN_OBJC_ROOT_CLASS' => 'YES',
        'CLANG_WARN_SUSPICIOUS_MOVE' => 'YES',
        'CLANG_WARN_UNREACHABLE_CODE' => 'YES',
        'CLANG_WARN__DUPLICATE_METHOD_MATCH' => 'YES',
        'GCC_WARN_64_TO_32_BIT_CONVERSION' => 'YES',
        'GCC_WARN_ABOUT_RETURN_TYPE' => 'YES',
        'GCC_WARN_UNDECLARED_SELECTOR' => 'YES',
        'GCC_WARN_UNINITIALIZED_AUTOS' => 'YES',
        'GCC_WARN_UNUSED_FUNCTION' => 'YES',
        'GCC_WARN_UNUSED_VARIABLE' => 'YES',
        'GCC_NO_COMMON_BLOCKS' => 'YES',
        'ENABLE_STRICT_OBJC_MSGSEND' => 'YES',
        'SWIFT_OPTIMIZATION_LEVEL' => '-Owholemodule',
        'ENABLE_BITCODE' => 'NO'
    }

    settings.each do |key, val| 
        project.build_configuration_list.set_setting(key, val)
    end
end

# TODO: Add platform variables
def configure_primary_build_configuration_settings(project, name, platforms)

    platforms.each do |platform|

        # FIXME: abstract away
        target = project.targets.find { |y| y.name == "#{name} #{platform}" }

        settings = {
            'INFOPLIST_FILE' => "#{name}/Info.plist",
            'ALWAYS_EMBED_SWIFT_STANDARD_LIBRARIES' => 'NO',
            'PRODUCT_NAME' => "#{name}",
            'CODE_SIGN_IDENTITY[sdk=iphoneos*]' => "-",
            'PRODUCT_BUNDLE_IDENTIFIER' => "com.dn-m.#{name}"
        }

        settings.each do |key, val|
            target.build_configuration_list.set_setting(key, val)
        end
    end
end

# TODO: Add platform variables
def configure_tests_build_configuration_settings(project, name, platforms)

    platforms.each do |platform|

        target = project.targets.find { |y| y.name == "#{name} #{platform} Tests" }

        settings = { 
            'INFOPLIST_FILE' => "#{name}Tests/Info.plist",
            'COMBINE_HIDPI_IMAGES' => 'YES'
        }

        settings.each do |key, val|
            target.build_configuration_list.set_setting(key, val)
        end
    end
end

# =============================================================================
# Schemes
# =============================================================================
# TODO: Add platform variables
def configure_schemes(project, name, platforms)
    share_schemes(project, name, platforms)
    add_testable_entries(project, name, platforms)

    Xcodeproj::Project.schemes("#{Dir.pwd}/#{$project_name}.xcodeproj").each do |scheme|
        puts "Scheme: #{scheme}"
    end
end

# TODO: Add platform variables
def add_testable_entries(project, name, platforms)

    platforms.each do |platform|
        
        # FIXME: abstract away
        target = project.targets.find { |y| y.name == "#{name} #{platform} Tests" }

        # Scheme
        scheme_name = "#{name} #{platform}.xcscheme"
        scheme_path = "#{Dir.pwd}/#{name}.xcodeproj/xcshareddata/xcschemes/#{scheme_name}"
        scheme = Xcodeproj::XCScheme.new(scheme_path)

        testable_entry = Xcodeproj::XCScheme::BuildAction::Entry.new(target)
        testable_entry.build_for_analyzing = false
        scheme.build_action.add_entry(testable_entry)
        scheme.test_action.add_testable(testable_ref(target))
        scheme.test_action.code_coverage_enabled = true
        scheme.save!
    end
end

def testable_ref(test_target)
    return Xcodeproj::XCScheme::TestAction::TestableReference.new(test_target)
end

# TODO: Add platform variables
def share_schemes(project, name, platforms)
    
    project.recreate_user_schemes(true)
    
    platforms.each do |platform|
        Xcodeproj::XCScheme.share_scheme(
            "#{Dir.pwd}/#{name}.xcodeproj", "#{name} #{platform}"
        )
    end
end

# =============================================================================
# Header
# TODO: iOS macOS / framework / app options
# =============================================================================
def configure_header(project, name, platforms)
    header_path = "#{name}/#{name}.h"
    create_empty_header(header_path)
    add_header_build_files(project, name, header_path, platforms)
end

def create_empty_header(path)
    FileUtils.touch(path)
end

def add_header_build_files(project, name, header_path, platforms)
    
    header_ref = project.main_group.new_file(header_path)

    platforms.each do |platform|
        build_file = project.targets
            .find { |y| y.name == "#{name} #{platform}" }
            .add_file_references([header_ref], 'header_build_file')
        build_file.first.settings = { 'ATTRIBUTES' => ['Public'] }
    end
end

# =============================================================================
# Targets
# =============================================================================
def configure_targets(project, name, type, platforms)

    platforms.each do |platform|

        target_name = "#{name} #{platform}"

        # TODO: Store versions in Hash somewhere
        version = platform == 'iOS' ? '8.4' : '10.9'
        platform_symbol = platform == 'iOS' ? :ios : :osx
        target_type = type == 'framework' ? :framework : :application

        primary_target = project.new_target(
            target_type, 
            target_name, 
            platform_symbol, 
            version
        )

        tests_target = project.new_target(
            :unit_test_bundle, 
            "#{target_name} Tests", 
            platform_symbol, 
            version
        )
        
        tests_target.add_dependency(primary_target)
    end
end

# =============================================================================
# Supporting Files
# =============================================================================
def add_info_plist_refs(project, name)
    [name, "#{name}Tests"].each do |group|
        project[group]["Supporting Files"].new_file("#{group}/Info.plist")
    end
end

def create_info_plists(name, type, platforms)
    platforms.each do |platform|
        case type
        when 'framework'
            create_framework_info_plist(name)
            create_tests_info_plist(name)
        when 'application'
            case platform
            when 'iOS'
                create_iOS_app_info_plist(name)
            when 'macOS'
                create_macOS_app_info_plist(name)
            end
            create_tests_info_plist(name)
        end    
    end
end

# TODO: App Info.plist
def create_framework_info_plist(name)
    File.open("#{name}/Info.plist", 'w') { |file|
        file.write(framework_info_plist)
    }
end

def create_tests_info_plist(name)
    File.open("#{name}Tests/Info.plist", 'w') { |file| 
        file.write(tests_info_plist)
    }
end

def create_macOS_app_info_plist(name)
    File.open("#{name}/Info.plist", 'w') { |file|
        file.write(macOS_app_info_plist)
    }
end

def create_iOS_app_info_plist(name)
    File.open("#{name}/Info.plist", 'w') { |file|
        file.write(iOS_app_info_plist)
    }
end

def framework_info_plist
    return shared_plist_contents + %{
        <key>CFBundlePackageType</key>
        <string>FMWK</string>
        <key>NSPrincipalClass</key>
        <string></string>
    </dict>
    </plist>
    }
end

def tests_info_plist
    return shared_plist_contents + %{
        <key>CFBundlePackageType</key>
        <string>BNDL</string>
    </dict>
    </plist>
    }
end

# macOS app Info.plist
def macOS_app_info_plist
    return shared_plist_contents + %{
        <key>CFBundleIconFile</key>
        <string></string>
        <key>CFBundlePackageType</key>
        <string>APPL</string>
        <key>LSMinimumSystemVersion</key>
        <string>$(MACOSX_DEPLOYMENT_TARGET)</string>
        <key>NSHumanReadableCopyright</key>
        <string>Copyright © 2016 James Bean. All rights reserved.</string>
        <key>NSMainNibFile</key>
        <string>MainMenu</string>
        <key>NSPrincipalClass</key>
        <string>NSApplication</string>
    </dict>
    </plist>
    }
end

# iOS app Info.plist
def iOS_app_info_plist
    return shared_plist_contents + %{
        <key>CFBundlePackageType</key>
        <string>APPL</string>
        <key>LSRequiresIPhoneOS</key>
        <true/>
        <key>UILaunchStoryboardName</key>
        <string>LaunchScreen</string>
        <key>UIMainStoryboardFile</key>
        <string>Main</string>
        <key>UIRequiredDeviceCapabilities</key>
        <array>
            <string>armv7</string>
        </array>
        <key>UISupportedInterfaceOrientations</key>
        <array>
            <string>UIInterfaceOrientationPortrait</string>
            <string>UIInterfaceOrientationLandscapeLeft</string>
            <string>UIInterfaceOrientationLandscapeRight</string>
        </array>
        <key>UISupportedInterfaceOrientations~ipad</key>
        <array>
            <string>UIInterfaceOrientationPortrait</string>
            <string>UIInterfaceOrientationPortraitUpsideDown</string>
            <string>UIInterfaceOrientationLandscapeLeft</string>
            <string>UIInterfaceOrientationLandscapeRight</string>
        </array>
    </dict>
    </plist>
    }
end

# The contents shared between all Info.plist files
def shared_plist_contents
    return %{
    <?xml version=\"1.0\" encoding=\"UTF-8\"?>
    <!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">
    <plist version=\"1.0\">
    <dict>
        <key>CFBundleDevelopmentRegion</key>
        <string>en</string>
        <key>CFBundleExecutable</key>
        <string>$(EXECUTABLE_NAME)</string>
        <key>CFBundleIdentifier</key>
        <string>$(PRODUCT_BUNDLE_IDENTIFIER)</string>
        <key>CFBundleInfoDictionaryVersion</key>
        <string>6.0</string>
        <key>CFBundleName</key>
        <string>$(PRODUCT_NAME)</string>
        <key>CFBundleShortVersionString</key>
        <string>1.0</string>
        <key>CFBundleSignature</key>
        <string>????</string>
        <key>CFBundleVersion</key>
        <string>$(CURRENT_PROJECT_VERSION)</string>
    }
end

# =============================================================================
# PBXGroups
# =============================================================================
def configure_PBXGroups(project, name)
    [name, "#{name}Tests"].each do |x|
        project
            .new_group(x)
                .new_group("Supporting Files")
    end
    return project
end

# =============================================================================
# config command
# =============================================================================
def config(name, platforms=['iOS', 'macOS'])
    create_gitignore
    create_travis(name, platforms)
    create_swift_lint
    create_hound
    create_cartfile
    create_readme(name, platforms)
end

def create_gitignore
    File.open('.gitignore', 'w') { |file| 
        file.puts("## Build generated")
        file.puts("build/")
        file.puts("DerivedData/")
        file.puts()
        file.puts("## Various settings")
        file.puts("*.pbxuser")
        file.puts("!default.pbxuser")
        file.puts("*.mode1v3")
        file.puts("!default.mode1v3")
        file.puts("*.mode2v3")
        file.puts("!default.mode2v3")
        file.puts("*.perspectivev3")
        file.puts("!default.perspectivev3")
        file.puts("xcuserdata/")
        file.puts()
        file.puts("## Other")
        file.puts("*.moved-aside")
        file.puts("*.xcuserstate")
        file.puts()
        file.puts("## Obj-C/Swift specific")
        file.puts("*.hmap")
        file.puts("*.ipa")
        file.puts("*.dSYM.zip")
        file.puts("*.dSYM")
        file.puts()
        file.puts("# Carthage")
        file.puts("Carthage/Checkouts")
        file.puts("Carthage/Build")
    }
end

# TODO: Store build hardware, OS versions, etc. in Hash somewhere
def create_travis(name, platforms)

    File.open('.travis.yml', 'w') { |file| 
        file.puts("language: objective-c")
        file.puts("osx_image: xcode8.2")
        file.puts("env:")
        file.puts("  matrix:")

        platforms.each do |platform|

            scheme = "#{name} #{platform}"

            case platform
            when 'iOS'
                
                file.puts(
                    "    - DESTINATION=\"platform=iOS Simulator,OS=9.3,name=iPad 2\""
                )
                
                file.puts("      SCHEME=\"#{scheme}\"")
                
                file.puts(
                    "    - DESTINATION=\"platform=iOS Simulator,OS=10.0,name=iPad Pro (12.9 inch)\""
                )

                file.puts("      SCHEME=\"#{scheme}\"")

            when 'macOS'
                file.puts("    - DESTINATION=\"platform=OS X\"")
                file.puts("      SCHEME=\"#{scheme}\"")            
            end
        end

        file.puts()
        file.puts("before_script: if [ -f ./Cartfile ]; then carthage update; fi;")
        file.puts()
        file.puts("script: travis_retry xcodebuild test")
        file.puts("  -project #{name}.xcodeproj")
        file.puts("  -scheme \"${SCHEME}\"")
        file.puts("  -destination \"${DESTINATION}\"")
        file.puts("  TOOLCHAINS=swift")
        file.puts()
        file.puts("after_success:")
        file.puts("  - bash <(curl -s https://codecov.io/bash)")
    }   
end

def create_swift_lint
    File.open('.swiftlint.yml', 'w') { |file| 
        file.puts("disabled_rules:")
        file.puts("  - comma")
        file.puts("  - variable_name")
        file.puts()
        file.puts("excluded:")
        file.puts("  - Carthage")
        file.puts()
        file.puts("trailing_whitespace:")
        file.puts("  ignores_empty_lines: true")
    }
end

def create_hound 
    File.open('.hound.yml', 'w') { |file| 
        file.puts("swift:")
        file.puts("  config_file: .swiftlint.yml")
    }
end

def create_cartfile
    FileUtils.touch('Cartfile')
end

def create_readme(name, platforms)

    platform_phrase = platforms.join(' or ')

    File.open('README.md', 'w') { |file| 
        file.puts("# #{name}")
        file.puts()
        file.puts("![Swift](https://img.shields.io/badge/%20in-swift%203.0-orange.svg)")
        file.puts("[![Build Status](https://travis-ci.org/dn-m/#{name}.svg?branch=master)](https://travis-ci.org/dn-m/#{name}) ")
        file.puts("[![codecov](https://codecov.io/gh/dn-m/#{name}/branch/master/graph/badge.svg)](https://codecov.io/gh/dn-m/#{name}) ")
        file.puts("[![Carthage compatible](https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat)](https://github.com/Carthage/Carthage) ")
        file.puts("[![GitHub version](https://badge.fury.io/gh/dn-m%2F#{name}.svg)](https://badge.fury.io/gh/dn-m%2F#{name}) ")
        file.puts()
        file.puts("## Integration")
        file.puts()
        file.puts("### Carthage")
        file.puts("Integrate **#{name}** into your #{platform_phrase} project with [Carthage](https://github.com/Carthage/Carthage).")
        file.puts()
        file.puts("1. Follow [these instructions](https://github.com/Carthage/Carthage#installing-carthage) to install Carthage, if necessary.")
        file.puts("2. Add `github \"dn-m/#{name}\"` to your [Cartfile](https://github.com/Carthage/Carthage/blob/master/Documentation/Artifacts.md#cartfile).")
        file.puts("3. Follow [these instructions](https://github.com/Carthage/Carthage#adding-frameworks-to-an-application) to integrate **#{name}** into your #{platform_phrase} project.")
        file.puts()
        file.puts("---")
        file.puts()
        file.puts("### Documentation")
        file.puts("See the [documentation](http://dn-m.github.io/#{name}/).")
    }
end

# =============================================================================
# bump command
# =============================================================================

# name of project, type of increment ("major", "minor", "patch")
def bump_version(name, type)
    if type != 'major' && type != 'minor' && type != 'patch'
        puts "Unknown type '#{type}'"
        return
    end

    # TODO: debugging
    puts "name: #{name}"
    puts "type: #{type}"
end

class Helper
  include Commander::Methods

    def run
        program :name, 'dn-m'
        program :version, '0.1'
        program :description, 'Creates and maintains dn-m projects.'

        command :init do |c|
            c.syntax = 'init [-a | -f] [iOS | macOS]'
            c.description = 'Create a new project'
            c.option '--application', 'Build an application target'
            c.option '--framework', 'Build a framework target'
            c.action do |args, options|

                puts "args: #{args}"
                puts "options: #{options}"

                unless !Dir.exist?("#{Dir.pwd}/#{$project_name}.xcodeproj") then
                    puts "There's already a project here!"
                    return
                end

                platforms = args.empty? ? ['iOS', 'macOS'] : args

                puts "Platforms: #{platforms}"

                if !platforms_are_supported(platforms)
                    puts "Platform from: #{platforms} not supported"
                    return
                end

                unless !verify_single_type(options)
                    puts "Can't do both application and framework. Choose one."
                    return
                end

                # Product type
                type = options.framework ? 'framework' : 'application'

                unless type != 'application'
                    puts "No application support yet."
                    return
                end

                puts "Type: #{type}"

                init(
                    $project_name, 
                    platforms, 
                    type
                )
            end
        end

        command :config do |c|
            c.syntax = 'config'
            c.description = 'Creates configuration files for testing.'
            c.action do |args, options|
                config($project_name)
            end
        end

        command :update do |c|
            c.syntax = 'update'
            c.description = 'Update the frameworks for the current project'
            c.action do |args, options|

                # Ensure that Cartfile exists
                unless File.exist?("Cartfile")
                    puts "No Cartfile!"
                    return
                end

                # Ensure that Cartfile is not empty
                unless !File.zero?("Cartfile")
                    puts "Cartfile empty!"
                    return
                end

                update_frameworks($project_name)
            end
        end

        command :inject do |c|
            c.syntax = 'inject'
            c.description = 'Injects the frameworks into the current project'
            c.action do |args, options|
                inject_frameworks($project_name)
            end
        end

        command :bump do |c|
            c.syntax = 'bump [--major | --minor | --patch]'
            c.description = 'Bump version tag, and prepare binary. If more than one is specified, only the "most important" will be incremented'
            c.option '-M', '--major', 'Increment the major version number'
            c.option '-m', '--minor', 'Increment the minor version number'
            c.option '-p', '--patch', 'Increment the patch version number'
            c.action do |args, options|
                type = ''
                if options.patch
                    type = 'patch'
                end
                if options.minor
                    type = 'minor'
                end
                if options.major
                    type = 'major'
                end
                if type == ''
                    puts 'No bump type specified, use one of major, minor or patch.'
                    return
                end

                bump_version($project_name, type)
            end
        end

        run!
    end

    def platforms_are_supported(platforms)
        platforms.each do |platform|
            if !supported_platforms.include?(platform)
                return false
            end
        end
        return true
    end

    def verify_single_type(options)
        return options.application && options.framework
    end

    def supported_platforms
        return ['iOS', 'macOS']
    end
end

Helper.new.run if $0 == __FILE__
